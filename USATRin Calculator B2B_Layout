// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol";
import "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol";
import "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol";
import "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol";
import "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol";

contract ImprovedRINManagementUpgradeable is Initializable, AccessControlUpgradeable, ReentrancyGuardUpgradeable, UUPSUpgradeable {
    bytes32 public constant ADMIN_ROLE = keccak256("ADMIN_ROLE");
    bytes32 public constant AUDITOR_ROLE = keccak256("AUDITOR_ROLE");
    IERC20Upgradeable public paymentToken;

    struct RINPurchaseOrder {
        uint256 id;
        address buyer;
        address seller;
        uint256 volumeInGallons;
        uint256 rinAmount;
        uint256 pricePerRin;
        string rinType;
        bool isApproved;
        bool isFulfilled;
    }

    uint256 private nextPOId;
    mapping(uint256 => RINPurchaseOrder) private rinPurchaseOrders;
    mapping(address => uint256) private rinBalances;

    event PurchaseOrderCreated(uint256 indexed id, address indexed buyer, address indexed seller, uint256 volumeInGallons, uint256 rinAmount, string rinType);
    event PurchaseOrderApproved(uint256 indexed id);
    event RINsTransferred(uint256 indexed id, address from, address to, uint256 rinAmount);
    event PaymentTransferred(uint256 indexed id, address from, address to, uint256 amount);

    function initialize(address _paymentTokenAddress) public initializer {
        __AccessControl_init();
        __ReentrancyGuard_init();
        __UUPSUpgradeable_init();

        _setupRole(ADMIN_ROLE, _msgSender());
        _setRoleAdmin(AUDITOR_ROLE, ADMIN_ROLE); // Make ADMIN_ROLE the admin of AUDITOR_ROLE

        nextPOId = 1;
        paymentToken = IERC20Upgradeable(_paymentTokenAddress);
    }

    function _authorizeUpgrade(address newImplementation) internal override onlyRole(ADMIN_ROLE) {}

    function createRINPurchaseOrder(address _seller, uint256 _volumeInGallons, uint256 _rinAmount, uint256 _pricePerRin, string memory _rinType) public onlyRole(AUDITOR_ROLE) {
        require(_volumeInGallons > 0, "Volume must be greater than 0");
        require(_rinAmount > 0, "RIN amount must be greater than 0");
        require(_pricePerRin > 0, "Price per RIN must be greater than 0");
        // Additional validations can be added here

        rinPurchaseOrders[nextPOId] = RINPurchaseOrder(
            nextPOId, 
            msg.sender, 
            _seller, 
            _volumeInGallons, 
            _rinAmount, 
            _pricePerRin, 
            _rinType, 
            false, // isApproved
            false  // isFulfilled
        );

        emit PurchaseOrderCreated(nextPOId, msg.sender, _seller, _volumeInGallons, _rinAmount, _rinType);
        nextPOId++;
    }

    function approveRINPurchaseOrder(uint256 _id) public onlyRole(ADMIN_ROLE) {
        RINPurchaseOrder storage po = rinPurchaseOrders[_id];
        require(!po.isApproved, "PO already approved");
        po.isApproved = true;

        emit PurchaseOrderApproved(_id);
    }

    function fulfillRINPurchaseOrder(uint256 _id) public nonReentrant onlyRole(ADMIN_ROLE) {
        RINPurchaseOrder storage po = rinPurchaseOrders[_id];
        require(po.isApproved, "PO must be approved");
        require(!po.isFulfilled, "RINs already transferred");

        uint256 paymentAmount = po.rinAmount * po.pricePerRin;
        require(paymentToken.transferFrom(po.buyer, po.seller, paymentAmount), "Payment transfer failed");

        rinBalances[po.seller] -= po.rinAmount;
        rinBalances[po.buyer] += po.rinAmount;
        po.isFulfilled = true;

        emit RINsTransferred(_id, po.seller, po.buyer, po.rinAmount);
        emit PaymentTransferred(_id, po.buyer, po.seller, paymentAmount);
    }

    // Function to grant and revoke roles safely with checks
    function grantRole(bytes32 role, address account) public override onlyRole(getRoleAdmin(role)) {
        super.grantRole(role, account);
    }

    function revokeRole(bytes32 role, address account) public override onlyRole(getRoleAdmin(role)) {
        super.revokeRole(role, account);
    }

    // Additional utility functions...
}
