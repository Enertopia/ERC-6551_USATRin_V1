// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "@openzeppelin/contracts/token/ERC20/IERC20.sol";
import "@openzeppelin/contracts/security/ReentrancyGuard.sol";
import "@openzeppelin/contracts/access/AccessControl.sol";

contract ImprovedRINManagement is AccessControl, ReentrancyGuard {
    bytes32 public constant ADMIN_ROLE = keccak256("ADMIN_ROLE");
    bytes32 public constant AUDITOR_ROLE = keccak256("AUDITOR_ROLE");
    IERC20 public paymentToken;

    struct RINPurchaseOrder {
        uint256 id;
        address buyer;
        address seller;
        uint256 volumeInGallons;
        uint256 rinAmount;
        uint256 pricePerRin;
        string rinType;
        bool isApproved;
        bool isFulfilled;
    }

    uint256 public nextPOId;
    mapping(uint256 => RINPurchaseOrder) public rinPurchaseOrders;
    mapping(address => uint256) public rinBalances;

    event PurchaseOrderCreated(uint256 indexed id, address buyer, address seller, uint256 rinAmount, string rinType);
    event PurchaseOrderApproved(uint256 indexed id);
    event RINsTransferred(uint256 indexed id, address from, address to, uint256 rinAmount);
    event PaymentTransferred(uint256 indexed id, address from, address to, uint256 amount);

    modifier onlyRole(bytes32 role) {
        require(hasRole(role, msg.sender), "Improper permissions");
        _;
    }

    constructor(address _paymentTokenAddress) {
        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);
        _setupRole(ADMIN_ROLE, msg.sender);
        nextPOId = 1;
        paymentToken = IERC20(_paymentTokenAddress);
    }

    function createRINPurchaseOrder(address _seller, uint256 _volumeInGallons, uint256 _rinAmount, uint256 _pricePerRin, string memory _rinType) public {
        rinPurchaseOrders[nextPOId] = RINPurchaseOrder(nextPOId, msg.sender, _seller, _volumeInGallons, _rinAmount, _pricePerRin, _rinType, false, false);
        emit PurchaseOrderCreated(nextPOId, msg.sender, _seller, _rinAmount, _rinType);
        nextPOId++;
    }

    function approveRINPurchaseOrder(uint256 _id) public onlyRole(ADMIN_ROLE) {
        RINPurchaseOrder storage po = rinPurchaseOrders[_id];
        require(!po.isApproved, "PO already approved");
        po.isApproved = true;
        emit PurchaseOrderApproved(_id);
    }

    function fulfillRINPurchaseOrder(uint256 _id) public nonReentrant onlyRole(ADMIN_ROLE) {
        RINPurchaseOrder storage po = rinPurchaseOrders[_id];
        require(po.isApproved, "PO must be approved");
        require(!po.isFulfilled, "RINs already transferred");

        uint256 paymentAmount = po.rinAmount * po.pricePerRin;
        require(paymentToken.transferFrom(po.buyer, po.seller, paymentAmount), "Payment transfer failed");

        rinBalances[po.seller] -= po.rinAmount;
        rinBalances[po.buyer] += po.rinAmount;
        po.isFulfilled = true;

        emit RINsTransferred(_id, po.seller, po.buyer, po.rinAmount);
        emit PaymentTransferred(_id, po.buyer, po.seller, paymentAmount);
    }

    // Additional functionalities as needed

    // Function to grant roles
    function grantRole(bytes32 role, address account) public override onlyRole(ADMIN_ROLE) {
        _grantRole(role, account);
    }

    // Function to revoke roles
    function revokeRole(bytes32 role, address account) public override onlyRole(ADMIN_ROLE) {
        _revokeRole(role, account);
    }
}
