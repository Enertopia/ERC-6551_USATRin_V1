// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "@openzeppelin/contracts-upgradeable/token/ERC20/IERC20Upgradeable.sol";
import "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol";
import "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol";
import "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol";
import "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol";

contract EnhancedRINTrackerUpgradeable is Initializable, UUPSUpgradeable, AccessControlUpgradeable, ReentrancyGuardUpgradeable {
    bytes32 public constant ADMIN_ROLE = keccak256("ADMIN_ROLE");
    bytes32 public constant AUDITOR_ROLE = keccak256("AUDITOR_ROLE");
    IERC20Upgradeable public rinToken;

    struct RINData {
        string producer;
        string fuelDCode;
        string fuelCategory;
        uint256 evMultiplier;
    }

    RINData public rinData;
    uint256 public totalGallonsProduced;
    uint256 public totalRINsGenerated;
    uint256 public totalRINsSold;
    uint256 public nextSerialNumber;

    event GallonsProducedUpdated(uint256 newGallonsProduced);
    event RINsGenerated(uint256 amountGenerated);
    event RINsSold(uint256 amountSold, uint256 serialNumberStart, uint256 serialNumberEnd);

    function initialize(
        address rinTokenAddress,
        string memory producer,
        string memory fuelDCode,
        string memory fuelCategory,
        uint256 evMultiplier
    ) public initializer {
        __AccessControl_init();
        __ReentrancyGuard_init();
        __UUPSUpgradeable_init();

        _setupRole(DEFAULT_ADMIN_ROLE, _msgSender());
        _setupRole(ADMIN_ROLE, _msgSender());

        rinToken = IERC20Upgradeable(rinTokenAddress);
        rinData = RINData(producer, fuelDCode, fuelCategory, evMultiplier);

        totalGallonsProduced = 0;
        totalRINsGenerated = 0;
        totalRINsSold = 0;
        nextSerialNumber = 1;
    }

    function _authorizeUpgrade(address newImplementation) internal override onlyRole(ADMIN_ROLE) {}

    function updateGallonsProduced(uint256 newGallons) external onlyRole(ADMIN_ROLE) {
        totalGallonsProduced += newGallons;
        uint256 newRINs = (newGallons * rinData.evMultiplier) / 10;
        totalRINsGenerated += newRINs;
        emit GallonsProducedUpdated(totalGallonsProduced);
        emit RINsGenerated(newRINs);
    }

    function sellRINs(uint256 amount, uint256 pricePerRIN, address buyer) external onlyRole(ADMIN_ROLE) nonReentrant {
        require(amount <= rinToken.balanceOf(address(this)), "Insufficient RINs available");
        uint256 totalCost = amount * pricePerRIN;

        require(rinToken.transfer(buyer, amount), "RIN transfer failed");

        totalRINsSold += amount;
        uint256 serialNumberStart = nextSerialNumber;
        uint256 serialNumberEnd = nextSerialNumber + amount - 1;
        nextSerialNumber += amount;

        emit RINsSold(amount, serialNumberStart, serialNumberEnd);
    }

    // Additional functionalities as needed

    function getCurrentState() external view returns (uint256, uint256, uint256, uint256) {
        return (totalGallonsProduced, totalRINsGenerated, totalRINsSold, nextSerialNumber);
    }
}
