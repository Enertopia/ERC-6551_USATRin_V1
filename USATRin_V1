// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "@openzeppelin/contracts-upgradeable/proxy/utils/UUPSUpgradeable.sol";
import "@openzeppelin/contracts-upgradeable/access/AccessControlUpgradeable.sol";
import "@openzeppelin/contracts-upgradeable/security/ReentrancyGuardUpgradeable.sol";
import "@openzeppelin/contracts-upgradeable/token/ERC721/extensions/ERC721URIStorageUpgradeable.sol";
import "@openzeppelin/contracts-upgradeable/utils/CountersUpgradeable.sol";
import "interfaces/IOracleProvider.sol"; // Abstract interface for oracle interactions
import "ipfs/IPFSStorage.sol"; // Assuming IPFSStorage is a contract for handling IPFS storage interaction

/**
 * @title USATRin: Advanced ERC-721 Compliant Contract for RIN Management
 * @notice Manages Renewable Identification Numbers (RINs), with enhanced security, flexibility, and efficiency.
 * @dev Incorporates UUPS for upgradeability, AccessControl for role-based permissions, and external oracle integration.
 */
contract USATRin is
    UUPSUpgradeable,
    AccessControlUpgradeable,
    ReentrancyGuardUpgradeable,
    ERC721URIStorageUpgradeable
{
    using CountersUpgradeable for CountersUpgradeable.Counter;
    CountersUpgradeable.Counter private _tokenIds; // For auto-incrementing token IDs

    bytes32 public constant ORACLE_MANAGER_ROLE = keccak256("ORACLE_MANAGER_ROLE");
    IOracleProvider public oracleProvider; // Oracle provider interface
    IPFSStorage public ipfsStorage; // IPFS storage for metadata

    // Events
    event RINRegistered(uint256 indexed rin, address indexed registrant, string metadataURI);
    event MetadataUpdated(uint256 indexed rin, string newMetadataURI);
    event OracleProviderUpdated(address oracleProvider);
    event IPFSStorageUpdated(address ipfsStorage);

    function initialize(
        address _admin,
        address _oracleProvider,
        address _ipfsStorageAddress,
        string memory _name,
        string memory _symbol
    ) public initializer {
        __UUPSUpgradeable_init();
        __AccessControl_init();
        __ReentrancyGuard_init();
        __ERC721URIStorage_init();
        __ERC721_init(_name, _symbol);

        _setupRole(DEFAULT_ADMIN_ROLE, _admin);
        _setupRole(ORACLE_MANAGER_ROLE, _admin); // Admin can delegate this later

        oracleProvider = IOracleProvider(_oracleProvider);
        ipfsStorage = IPFSStorage(_ipfsStorageAddress);

        emit OracleProviderUpdated(_oracleProvider);
        emit IPFSStorageUpdated(_ipfsStorageAddress);
    }

    function _authorizeUpgrade(address newImplementation) internal override onlyRole(DEFAULT_ADMIN_ROLE) {}

    function setOracleProvider(address _newOracleProvider) public onlyRole(ORACLE_MANAGER_ROLE) {
        require(_newOracleProvider != address(0), "USATRin: Invalid oracle provider address");
        oracleProvider = IOracleProvider(_newOracleProvider);
        emit OracleProviderUpdated(_newOracleProvider);
    }

    function setIPFSStorage(address _newIPFSStorageAddress) public onlyRole(DEFAULT_ADMIN_ROLE) {
        require(_newIPFSStorageAddress != address(0), "USATRin: Invalid IPFS storage address");
        ipfsStorage = IPFSStorage(_newIPFSStorageAddress);
        emit IPFSStorageUpdated(_newIPFSStorageAddress);
    }

    function registerRIN(string memory _metadataURI) public nonReentrant returns (uint256) {
        _tokenIds.increment();
        uint256 newRINId = _tokenIds.current();

        _mint(msg.sender, newRINId);
        _setTokenURI(newRINId, _metadataURI);

        emit RINRegistered(newRINId, msg.sender, _metadataURI);
        return newRINId;
    }

    function updateRINMetadata(uint256 _rin, string memory _newMetadataURI) public {
        require(_isApprovedOrOwner(_msgSender(), _rin), "USATRin: Not authorized");
        _setTokenURI(_rin, _newMetadataURI);
        emit MetadataUpdated(_rin, _newMetadataURI);
    }

    // Overriding _setTokenURI to interact with IPFSStorage for metadata management
    function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal override {
        super._setTokenURI(tokenId, _tokenURI);
        ipfsStorage.storeMetadataURI(tokenId, _tokenURI);
    }

    // Overriding tokenURI to retrieve metadata from IPFSStorage
    function tokenURI(uint256 tokenId) public view override returns (string memory) {
        require(_exists(tokenId), "ERC721Metadata: URI query for nonexistent token");
        return ipfsStorage.retrieveMetadataURI(tokenId);
    }

    // Batch processing for RIN registration to optimize gas usage
    function batchRegisterRINs(string[] memory metadataURIs) public nonReentrant returns (uint256[] memory) {
        uint256[] memory rinIds = new uint256[](metadataURIs.length);

        for (uint i = 0; i < metadataURIs.length; i++) {
            rinIds[i] = registerRIN(metadataURIs[i]);
        }

        return rinIds;
    }

    // Placeholder for external API integration functions and more complex business logic
    // ...

    // Additional security checks, validations, and advanced functionality
    // ...
}
